[{"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\index.js":"1","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\App.js":"2","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\GlobalStyles.js":"3","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Header.js":"4","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Router.js":"5","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Home\\index.js":"6","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Search\\index.js":"7","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Detail\\index.js":"8","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Detail\\DetailContainer.js":"9","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Detail\\DetailPresenter.js":"10","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Home\\HomeContainer.js":"11","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Home\\HomePresenter.js":"12","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Search\\SearchContainer.js":"13","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Search\\SearchPresenter.js":"14","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\api.js":"15","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Message.js":"16","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Section.js":"17","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Poster.js":"18","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Loader.js":"19","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\index.js":"20","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TvContainer.js":"21","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TvPresenter.js":"22","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TVContainer.js":"23","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TVPresenter.js":"24","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\BestPoster.js":"25"},{"size":158,"mtime":1606884998902,"results":"26","hashOfConfig":"27"},{"size":241,"mtime":1607504417380,"results":"28","hashOfConfig":"27"},{"size":585,"mtime":1607488905399,"results":"29","hashOfConfig":"27"},{"size":2127,"mtime":1607565149759,"results":"30","hashOfConfig":"27"},{"size":951,"mtime":1606884983738,"results":"31","hashOfConfig":"27"},{"size":79,"mtime":1606884562657,"results":"32","hashOfConfig":"27"},{"size":85,"mtime":1607055801243,"results":"33","hashOfConfig":"27"},{"size":85,"mtime":1606885001622,"results":"34","hashOfConfig":"27"},{"size":1949,"mtime":1607504201005,"results":"35","hashOfConfig":"27"},{"size":3340,"mtime":1606894276555,"results":"36","hashOfConfig":"27"},{"size":2327,"mtime":1607494135266,"results":"37","hashOfConfig":"27"},{"size":5300,"mtime":1607582360853,"results":"38","hashOfConfig":"27"},{"size":2299,"mtime":1607504237557,"results":"39","hashOfConfig":"27"},{"size":2613,"mtime":1607504230846,"results":"40","hashOfConfig":"27"},{"size":1099,"mtime":1607504216020,"results":"41","hashOfConfig":"27"},{"size":570,"mtime":1607392363023,"results":"42","hashOfConfig":"27"},{"size":747,"mtime":1607392616311,"results":"43","hashOfConfig":"27"},{"size":1863,"mtime":1607577630135,"results":"44","hashOfConfig":"27"},{"size":383,"mtime":1606883589266,"results":"45","hashOfConfig":"27"},{"size":73,"mtime":1607504400114,"results":"46","hashOfConfig":"27"},{"size":1378,"mtime":1607504400071,"results":"47","hashOfConfig":"27"},{"size":2415,"mtime":1607504400082,"results":"48","hashOfConfig":"27"},{"size":1378,"mtime":1607504400071,"results":"49","hashOfConfig":"27"},{"size":4701,"mtime":1607582605958,"results":"50","hashOfConfig":"27"},{"size":1948,"mtime":1607583609038,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1p77tq2",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\index.js",[],["111","112"],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\App.js",["113"],"import Router from \"./Router\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport Header from \"./Header\";\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <Router />\n      {/* <Header /> */}\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\GlobalStyles.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Header.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Router.js",["114"],"import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Home from \"../routes/Home\";\r\nimport TV from \"../routes/TV\";\r\nimport Detail from \"../routes/Detail\";\r\nimport Search from \"../routes/Search\";\r\n\r\n// 오로지 라우터만 관리하는 컴포넌트가 될 것이다.\r\n\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      {/* 기본적으로 switch가 없으면 라우터 배치하면 모든 라우터들이 탄다 */}\r\n      {/* switch를 활용하면 오로지 하나의 라우터만 타게된다.  */}\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" exact component={TV} />\r\n        <Route path=\"/search\" exact component={Search} />\r\n        <Route path=\"/movie/:id\" exact component={Detail} />\r\n        <Route path=\"/show/:id\" exact component={Detail} />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Home\\index.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Search\\index.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Detail\\index.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Detail\\DetailContainer.js",["115"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  // id  넘어와야하고 영화인지 tv인지\r\n  // 생성자에서 할일\r\n  // 영화 상세 페이지를 표현해야 하는지에 대해 설정해야한다!\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"),\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    // id 가지고 오기 ->  match.params\r\n    //  만약에 id가 안들어오면 Home 으로 강제 이동 -> history의 push가 해준다.\r\n    // 사용자의 요청을 서버가 받고, 재요청 하도록 하는 것을 redirect 라고 한다.\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id);\r\n\r\n    // 올바르지 않은 id라면\r\n    if (isNaN(parsedId)) {\r\n      // Home 으로 redirect\r\n      return push(\"/\");\r\n    }\r\n\r\n    let result = null;\r\n    // 위에있는 result 를 사용할것! 위치임 데이터에서 뽑아서 오는 result!\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"아무것도 찾을 수가 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n        result,\r\n      });\r\n    }\r\n  }\r\n\r\n  //  함수형 컴포넌트에서 return 에 해당된다.\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Detail\\DetailPresenter.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Home\\HomeContainer.js",["116","117"],"import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"../../api\";\r\n//Container의 역할 :Application에서 사용되어지는 기능(함수), 상태 (state), 이벤트 등을\r\n// 구현하고, presenter에 전달!\r\n\r\nexport default class extends React.Component {\r\n  //클래스형 컴ㄴ포넌트에서 state 만들기\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    topRated: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  //constructor: 클래스 생성자\r\n  // 생성자의 매개변수로 부모 컴포넌트 props가 들어온다.\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // useEffect 랑 똑같음 !! useEffect(() =>{}, []) 랑 같음!\r\n  // 여기서의 비동기 처리는 앞에 async 키워드를 붙여주면 된다.\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // data: { results : [{}, {}, {}...]}\r\n\r\n      // data 안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다.\r\n      // 똑같은 표현은 const nowPlaying = await (await movieApi.nowPlaying()).data.results; 와 같음\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n      const {\r\n        data: { results: topRated },\r\n      } = await moviesApi.topRated();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n        topRated,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"영화 정보를 찾을 수 없습니다. \",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  //  함수형 컴포넌트에서 return 에 해당된다.\r\n  render() {\r\n    const {\r\n      nowPlaying,\r\n      upcoming,\r\n      popular,\r\n      topRated,\r\n      error,\r\n      loading,\r\n    } = this.state;\r\n\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n        topRated={topRated}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Home\\HomePresenter.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Search\\SearchContainer.js",["118","119","120"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport Poster from \"../../components/Poster\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  // submit\r\n  handleSubmit = (event) => {\r\n    //  form 에서 submit이 작동은 하는데, 원래 하고자 했던 이벤트를 취소한다.\r\n\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  // update - onChange에서 일어날 이벤트\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value: searchTerm },\r\n    } = event;\r\n    this.setState({ searchTerm });\r\n  };\r\n\r\n  // search -> 검색어를 넣은 api 호출\r\n  // 이벤트가 일어났을 때 비동기로 호출\r\n  searchByTerm = async () => {\r\n    // 1. 검색어 가져오기\r\n    const { searchTerm } = this.state;\r\n\r\n    // 2. loading 설정하기\r\n    this.setState({ loading: true });\r\n\r\n    // 3. 실제 api 호출하기\r\n    // 데이터의 응답 형태 : { data : { results : [ {}, {}, {}, ... ] } }\r\n    try {\r\n      // moviesApi.search -> movieResults에 담기\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n\r\n      // tvApi.search -> tvResults에 담기\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n\r\n      this.setState({ movieResults, tvResults });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"결과를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  // 함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, error, loading } = this.state;\r\n\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        error={error}\r\n        loading={loading}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\Search\\SearchPresenter.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\api.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Message.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Section.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Poster.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\Loader.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\index.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TvContainer.js",["121"],"import React from \"react\";\r\nimport TvPresenter from \"./TvPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n\r\n      this.setState({\r\n        topRated,\r\n        popular,\r\n        airingToday,\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find TV information\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n\r\n    return (\r\n      <TvPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n",["122","123"],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TvPresenter.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TVContainer.js",["124","125","126"],"import React from \"react\";\r\nimport { tvApi } from \"../../api\";\r\nimport TVPresenter from \"./TVPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingtoday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const resoponse = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n\r\n      const {\r\n        data: { results: airingtoday },\r\n      } = await tvApi.airingToday();\r\n\r\n      this.setState({\r\n        topRated,\r\n        popular,\r\n        airingtoday,\r\n      });\r\n\r\n      console.log(topRated);\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"방송 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n  // 함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { topRated, popular, airingtoday, error, loading } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingtoday={airingtoday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\routes\\TV\\TVPresenter.js",[],"C:\\Users\\bit\\Documents\\GitHub\\bitflix\\src\\components\\BestPoster.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":11,"column":1,"nodeType":"137","endLine":26,"endColumn":3},{"ruleId":"135","severity":1,"message":"138","line":5,"column":1,"nodeType":"137","endLine":71,"endColumn":2},{"ruleId":"135","severity":1,"message":"138","line":7,"column":1,"nodeType":"137","endLine":90,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":21,"column":3,"nodeType":"141","messageId":"142","endLine":23,"endColumn":4},{"ruleId":"131","severity":1,"message":"143","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":14},{"ruleId":"135","severity":1,"message":"138","line":6,"column":1,"nodeType":"137","endLine":87,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":68,"column":3,"nodeType":"141","messageId":"142","endLine":70,"endColumn":4},{"ruleId":"135","severity":1,"message":"138","line":5,"column":1,"nodeType":"137","endLine":57,"endColumn":2},{"ruleId":"127","replacedBy":"144"},{"ruleId":"129","replacedBy":"145"},{"ruleId":"135","severity":1,"message":"138","line":5,"column":1,"nodeType":"137","endLine":64,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":14,"column":3,"nodeType":"141","messageId":"142","endLine":16,"endColumn":4},{"ruleId":"131","severity":1,"message":"146","line":20,"column":13,"nodeType":"133","messageId":"134","endLine":20,"endColumn":22},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous class","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Poster' is defined but never used.",["147"],["148"],"'resoponse' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]